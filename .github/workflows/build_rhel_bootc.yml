name: Build and push
on:
  workflow_dispatch:
  workflow_call:
    outputs:
      image_tag:
        description: "Tag of the built image"
        value: ${{ jobs.rhel-bootc-image-build.outputs.image_tag }}
  push:
    tags:
      - '*'

jobs:
  Build:
    name: Build and Push
    runs-on: ubuntu-latest
    env:
      SMDEV_CONTAINER_OFF: 1
      SOURCE_REGISTRY_HOST: "registry.redhat.io"
      CONTAINERFILE: Containerfile
      DEST_IMAGE: "${{ github.actor }}/${{ github.event.repository.name }}"
      TAGLIST: latest ${{ github.sha }} ${{ github.ref_name }}
      DEST_REGISTRY_HOST: "ghcr.io"
    container:
      image: registry.access.redhat.com/ubi9/ubi
      options: --privileged
    permissions:
      contents: write
      packages: write
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Clone the repository
        uses: actions/checkout@v4

      - name: Generate version information for web demo
        run: |
          # Create version.json from template
          VERSION="${GITHUB_REF_NAME:-demo-1.0.0}"
          BUILD_SHA="${{ github.sha }}"
          BUILD_DATE=$(date +%Y-%m-%d)
          BUILD_TIME=$(date +%H:%M:%S)
          BRANCH="${{ github.ref_name }}"
          IMAGE_TAG="${{ github.ref_name }}"
          REGISTRY="${{ env.DEST_REGISTRY_HOST }}/${{ env.DEST_IMAGE }}"
          ENVIRONMENT="demo"
          PIPELINE_RUN="${{ github.run_number }}"
          
          # Replace template variables
          sed -e "s/\${VERSION}/$VERSION/g" \
              -e "s/\${BUILD_SHA}/$BUILD_SHA/g" \
              -e "s/\${BUILD_DATE}/$BUILD_DATE/g" \
              -e "s/\${BUILD_TIME}/$BUILD_TIME/g" \
              -e "s/\${BRANCH}/$BRANCH/g" \
              -e "s/\${IMAGE_TAG}/$IMAGE_TAG/g" \
              -e "s|\${REGISTRY}|$REGISTRY|g" \
              -e "s/\${ENVIRONMENT}/$ENVIRONMENT/g" \
              -e "s/\${PIPELINE_RUN}/$PIPELINE_RUN/g" \
              -e "s/\${GITHUB_WORKFLOW}/${{ github.workflow }}/g" \
              -e "s/\${GITHUB_RUN_ID}/${{ github.run_id }}/g" \
              -e "s/\${GITHUB_RUN_NUMBER}/${{ github.run_number }}/g" \
              -e "s/\${GITHUB_ACTOR}/${{ github.actor }}/g" \
              web/version.json.template > web/version.json
          
          echo "Generated version.json:"
          cat web/version.json

      - name: Get container tools in UBI builder
        run: dnf -y install podman buildah skopeo

      - name: Access a subscription via activation key
        run: subscription-manager register --org=${{ secrets.RHT_ORGID }} --activationkey=${{ secrets.RHT_ACT_KEY }}

      - name: Workaround open podman-login action issue
        env:
          auth: "{ \"auths\": {} }"
        run: |
          mkdir -p $HOME/.docker
          echo $auth > $HOME/.docker/config.json

      - name: Log in to the RHT terms based registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.SOURCE_REGISTRY_HOST }}
          username: ${{ secrets.SOURCE_REGISTRY_USER }}
          password: ${{ secrets.SOURCE_REGISTRY_PASSWORD }}
          auth_file_path: /run/containers/0/auth.json

      - name: Use buildah bud to create the image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.DEST_IMAGE }}
          tags: ${{ env.TAGLIST }}
          containerfiles: ${{ env.CONTAINERFILE }}

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.DEST_REGISTRY_HOST }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          auth_file_path: /run/containers/0/auth.json

      - name: Push to GitHub Container Repository
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.DEST_REGISTRY_HOST }}

      # >>> NUEVO: determinamos qué tag se usó para pasar al workflow de AMI
      - name: Determinar tag principal
        id: set-tag
        shell: bash
        run: |
          # Si el disparador fue por tag, usamos ese; sino, usamos el nombre de la rama o 'latest'
          if [ "${GITHUB_REF_TYPE}" = "tag" ] && [ -n "${GITHUB_REF_NAME}" ]; then
            tag="${GITHUB_REF_NAME}"
          else
            tag="${GITHUB_REF_NAME:-latest}"
          fi
          echo "image_tag=$tag" >> "$GITHUB_OUTPUT"
          echo "Tag seleccionado: $tag"

      - name: Clean up the subscription
        if: always()
        run: subscription-manager unregister

