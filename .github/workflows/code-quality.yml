name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: ${{ secrets.SONAR_TOKEN != '' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dockerfile-quality:
    name: Dockerfile Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Hadolint (Detailed)
      id: hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Containerfile
        format: json
        no-fail: true

    - name: Parse Hadolint Results
      run: |
        if [ -f hadolint-results.json ]; then
          echo "## Dockerfile Quality Report" >> $GITHUB_STEP_SUMMARY
          
          # Count issues by severity
          errors=$(jq '[.[] | select(.level == "error")] | length' hadolint-results.json)
          warnings=$(jq '[.[] | select(.level == "warning")] | length' hadolint-results.json)
          info=$(jq '[.[] | select(.level == "info")] | length' hadolint-results.json)
          
          echo "- ❌ Errors: $errors" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Warnings: $warnings" >> $GITHUB_STEP_SUMMARY
          echo "- ℹ️ Info: $info" >> $GITHUB_STEP_SUMMARY
          
          if [ "$errors" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Critical Issues:" >> $GITHUB_STEP_SUMMARY
            jq -r '.[] | select(.level == "error") | "- Line \(.line): \(.message) (\(.code))"' hadolint-results.json >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Docker best practices check
      run: |
        echo "## Docker Best Practices Analysis" >> $GITHUB_STEP_SUMMARY
        
        # Check for best practices
        echo "### Best Practices Check:" >> $GITHUB_STEP_SUMMARY
        
        # Check for non-root user
        if grep -q "USER " Containerfile; then
          echo "✅ Uses non-root user" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Consider using non-root user" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for LABEL instructions
        if grep -q "LABEL " Containerfile; then
          echo "✅ Has metadata labels" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Consider adding metadata labels" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for .dockerignore
        if [ -f .dockerignore ]; then
          echo "✅ Has .dockerignore file" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Consider adding .dockerignore file" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for multi-stage build
        if grep -q "FROM.*AS" Containerfile; then
          echo "✅ Uses multi-stage build" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ Not using multi-stage build" >> $GITHUB_STEP_SUMMARY
        fi

  shellcheck:
    name: Shell Script Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Find shell scripts
      id: find-scripts
      run: |
        # Find shell scripts
        find . -name "*.sh" -type f > shell_scripts.txt || true
        
        # Check if any scripts found
        if [ -s shell_scripts.txt ]; then
          echo "scripts_found=true" >> $GITHUB_OUTPUT
          echo "Found shell scripts:" >> $GITHUB_STEP_SUMMARY
          while read -r script; do
            echo "- $script" >> $GITHUB_STEP_SUMMARY
          done < shell_scripts.txt
        else
          echo "scripts_found=false" >> $GITHUB_OUTPUT
          echo "No shell scripts found to analyze" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Run ShellCheck
      if: steps.find-scripts.outputs.scripts_found == 'true'
      run: |
        # Install ShellCheck
        sudo apt-get update && sudo apt-get install -y shellcheck
        
        echo "## ShellCheck Results" >> $GITHUB_STEP_SUMMARY
        
        # Run ShellCheck on all found scripts
        while read -r script; do
          echo "### Checking $script" >> $GITHUB_STEP_SUMMARY
          if shellcheck "$script"; then
            echo "✅ No issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Issues found (see logs above)" >> $GITHUB_STEP_SUMMARY
          fi
        done < shell_scripts.txt

  yaml-quality:
    name: YAML Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install yamllint
      run: pip install yamllint

    - name: Run yamllint
      run: |
        # Create yamllint config
        cat > .yamllint.yml << 'EOF'
        extends: default
        rules:
          line-length:
            max: 120
          comments:
            min-spaces-from-content: 1
          truthy:
            allowed-values: ['true', 'false', 'on', 'off']
        EOF
        
        echo "## YAML Quality Report" >> $GITHUB_STEP_SUMMARY
        
        # Check YAML files
        if find . -name "*.yml" -o -name "*.yaml" | grep -v node_modules | head -1 > /dev/null; then
          if yamllint -f parsable . > yamllint-results.txt 2>&1; then
            echo "✅ All YAML files are valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ YAML issues found:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -20 yamllint-results.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "ℹ️ No YAML files found to check" >> $GITHUB_STEP_SUMMARY
        fi

  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check documentation files
      run: |
        echo "## Documentation Quality Report" >> $GITHUB_STEP_SUMMARY
        
        # Check for README
        if [ -f README.md ]; then
          echo "✅ README.md exists" >> $GITHUB_STEP_SUMMARY
          
          # Check README length
          lines=$(wc -l < README.md)
          if [ "$lines" -gt 20 ]; then
            echo "✅ README has substantial content ($lines lines)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ README is quite short ($lines lines)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ No README.md found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for CLAUDE.md
        if [ -f CLAUDE.md ]; then
          echo "✅ CLAUDE.md exists for AI assistance" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No CLAUDE.md found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for LICENSE
        if [ -f LICENSE ] || [ -f LICENSE.txt ] || [ -f LICENSE.md ]; then
          echo "✅ License file exists" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No license file found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Markdown link checker
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        folder-path: '.'
      continue-on-error: true

    - name: Create markdown link check config
      run: |
        mkdir -p .github
        cat > .github/markdown-link-check-config.json << 'EOF'
        {
          "ignorePatterns": [
            {
              "pattern": "^http://localhost"
            },
            {
              "pattern": "^https://localhost"
            }
          ],
          "aliveStatusCodes": [200, 206, 999],
          "timeout": "10s",
          "retryOn429": true,
          "retryCount": 3
        }
        EOF

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [sonarcloud-analysis, dockerfile-quality, shellcheck, yaml-quality, documentation-quality]
    if: always()
    
    steps:
    - name: Quality Gate Summary
      run: |
        echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| SonarCloud Analysis | ${{ needs.sonarcloud-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dockerfile Quality | ${{ needs.dockerfile-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Shell Script Quality | ${{ needs.shellcheck.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| YAML Quality | ${{ needs.yaml-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation Quality | ${{ needs.documentation-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [[ "${{ needs.dockerfile-quality.result }}" == "failure" || "${{ needs.shellcheck.result }}" == "failure" || "${{ needs.yaml-quality.result }}" == "failure" ]]; then
          echo "❌ **Quality Gate: FAILED** - Critical issues found" >> $GITHUB_STEP_SUMMARY
          echo "quality_gate=failed" >> $GITHUB_ENV
        else
          echo "✅ **Quality Gate: PASSED** - No critical issues" >> $GITHUB_STEP_SUMMARY  
          echo "quality_gate=passed" >> $GITHUB_ENV
        fi

    - name: Set quality gate status
      if: github.event_name == 'pull_request'
      run: |
        if [ "$quality_gate" = "failed" ]; then
          exit 1
        fi