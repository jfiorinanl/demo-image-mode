name: Update Running Instances

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to update to (e.g., latest, v1.2.3)'
        required: true
        type: string
        default: 'latest'
      instance_ids:
        description: 'Comma-separated EC2 instance IDs (leave empty to auto-discover)'
        required: false
        type: string
      force_reboot:
        description: 'Force reboot instances after bootc switch'
        required: false
        type: boolean
        default: false
      reboot_delay_minutes:
        description: 'Minutes to wait before rebooting (for graceful shutdown)'
        required: false
        type: number
        default: 5

permissions:
  contents: read

jobs:
  update-instances:
    name: Update EC2 Instances with Bootc
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    
    steps:
      - name: Validate inputs
        run: |
          echo "## Instance Update Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Instance IDs**: ${{ inputs.instance_ids || 'Auto-discover from tags' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Reboot**: ${{ inputs.force_reboot }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Reboot Delay**: ${{ inputs.reboot_delay_minutes }} minutes" >> $GITHUB_STEP_SUMMARY

      - name: Find target instances
        id: find-instances
        run: |
          if [ -n "${{ inputs.instance_ids }}" ]; then
            # Use provided instance IDs
            INSTANCE_IDS="${{ inputs.instance_ids }}"
            echo "Using provided instance IDs: $INSTANCE_IDS"
          else
            # Auto-discover instances with Project=rhel-bootc-demo tag
            INSTANCE_IDS=$(aws ec2 describe-instances \
              --filters "Name=instance-state-name,Values=running" \
                        "Name=tag:Project,Values=rhel-bootc-demo" \
              --query 'Reservations[].Instances[].InstanceId' \
              --output text \
              --region "${AWS_REGION}" | tr '\t' ',')
            
            if [ -z "$INSTANCE_IDS" ]; then
              echo "❌ No instances found with Project=rhel-bootc-demo tag"
              exit 1
            fi
            echo "Auto-discovered instances: $INSTANCE_IDS"
          fi
          
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
          
          # Validate instances exist and are running
          IFS=',' read -ra INSTANCES <<< "$INSTANCE_IDS"
          echo "### Target Instances:" >> $GITHUB_STEP_SUMMARY
          
          for INSTANCE_ID in "${INSTANCES[@]}"; do
            if [ -n "$INSTANCE_ID" ]; then
              STATE=$(aws ec2 describe-instances \
                --instance-ids "$INSTANCE_ID" \
                --query 'Reservations[0].Instances[0].State.Name' \
                --output text \
                --region "${AWS_REGION}" 2>/dev/null || echo "not-found")
              
              if [ "$STATE" = "running" ]; then
                echo "- ✅ $INSTANCE_ID (running)" >> $GITHUB_STEP_SUMMARY
              else
                echo "- ❌ $INSTANCE_ID ($STATE)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done

      - name: Check container image exists
        run: |
          echo "🔍 Verifying container image exists..."
          
          # Check if the image exists in GHCR
          IMAGE_URL="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ inputs.image_tag }}"
          
          # Use skopeo to check if image exists (requires auth)
          echo "Checking image: $IMAGE_URL"
          echo "✅ Image validation (assuming it exists - add actual check if needed)" >> $GITHUB_STEP_SUMMARY

      - name: Execute bootc switch on instances
        id: bootc-switch
        run: |
          IFS=',' read -ra INSTANCES <<< "${{ steps.find-instances.outputs.instance_ids }}"
          
          echo "### Bootc Switch Results:" >> $GITHUB_STEP_SUMMARY
          
          SUCCESSFUL_UPDATES=()
          FAILED_UPDATES=()
          
          for INSTANCE_ID in "${INSTANCES[@]}"; do
            if [ -n "$INSTANCE_ID" ]; then
              echo "🔄 Processing instance: $INSTANCE_ID"
              
              # Execute bootc switch via SSM
              COMMAND_ID=$(aws ssm send-command \
                --instance-ids "$INSTANCE_ID" \
                --document-name "AWS-RunShellScript" \
                --parameters "commands=[
                  \"echo 'Starting bootc upgrade process...'\",
                  \"NEW_IMAGE='ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ inputs.image_tag }}'\",
                  \"echo \\\"Switching to image: \$NEW_IMAGE\\\"\",
                  \"sudo bootc switch \\\"\$NEW_IMAGE\\\" 2>&1 | tee /tmp/bootc-switch.log\",
                  \"echo \\\"Bootc switch completed. Current status:\\\"\",
                  \"sudo bootc status\",
                  \"echo \\\"Update staged. Reboot required to activate.\\\"\",
                  \"echo \\\"Bootc switch log:\\\"\",
                  \"cat /tmp/bootc-switch.log\"
                ]" \
                --comment "Bootc upgrade via GitHub Actions" \
                --timeout-seconds 300 \
                --region "${AWS_REGION}" \
                --query 'Command.CommandId' \
                --output text)
              
              if [ -n "$COMMAND_ID" ] && [ "$COMMAND_ID" != "None" ]; then
                echo "📋 Command sent to $INSTANCE_ID: $COMMAND_ID"
                
                # Wait for command completion
                echo "⏳ Waiting for command to complete..."
                sleep 30
                
                # Check command status
                STATUS=$(aws ssm get-command-invocation \
                  --command-id "$COMMAND_ID" \
                  --instance-id "$INSTANCE_ID" \
                  --query 'Status' \
                  --output text \
                  --region "${AWS_REGION}" 2>/dev/null || echo "Failed")
                
                if [ "$STATUS" = "Success" ]; then
                  echo "- ✅ $INSTANCE_ID: Bootc switch completed successfully" >> $GITHUB_STEP_SUMMARY
                  SUCCESSFUL_UPDATES+=("$INSTANCE_ID")
                else
                  echo "- ❌ $INSTANCE_ID: Bootc switch failed (Status: $STATUS)" >> $GITHUB_STEP_SUMMARY
                  FAILED_UPDATES+=("$INSTANCE_ID")
                  
                  # Get error output
                  ERROR_OUTPUT=$(aws ssm get-command-invocation \
                    --command-id "$COMMAND_ID" \
                    --instance-id "$INSTANCE_ID" \
                    --query 'StandardErrorContent' \
                    --output text \
                    --region "${AWS_REGION}" 2>/dev/null || echo "No error details available")
                  
                  if [ -n "$ERROR_OUTPUT" ] && [ "$ERROR_OUTPUT" != "None" ]; then
                    echo "  Error: $ERROR_OUTPUT" >> $GITHUB_STEP_SUMMARY
                  fi
                fi
              else
                echo "- ❌ $INSTANCE_ID: Failed to send SSM command" >> $GITHUB_STEP_SUMMARY
                FAILED_UPDATES+=("$INSTANCE_ID")
              fi
            fi
          done
          
          # Store results for next step
          echo "successful_updates=${SUCCESSFUL_UPDATES[*]}" >> $GITHUB_OUTPUT
          echo "failed_updates=${FAILED_UPDATES[*]}" >> $GITHUB_OUTPUT
          
          if [ ${#FAILED_UPDATES[@]} -gt 0 ]; then
            echo "⚠️ Some instances failed to update" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Reboot instances (if requested)
        if: inputs.force_reboot == true && steps.bootc-switch.outputs.successful_updates != ''
        run: |
          echo "### Instance Reboot Process:" >> $GITHUB_STEP_SUMMARY
          
          read -ra SUCCESSFUL_INSTANCES <<< "${{ steps.bootc-switch.outputs.successful_updates }}"
          
          for INSTANCE_ID in "${SUCCESSFUL_INSTANCES[@]}"; do
            if [ -n "$INSTANCE_ID" ]; then
              echo "⏰ Scheduling reboot for $INSTANCE_ID in ${{ inputs.reboot_delay_minutes }} minutes..."
              
              aws ssm send-command \
                --instance-ids "$INSTANCE_ID" \
                --document-name "AWS-RunShellScript" \
                --parameters "commands=[
                  \"echo 'Bootc upgrade completed. Scheduling reboot in ${{ inputs.reboot_delay_minutes }} minutes...'\",
                  \"sudo shutdown -r +${{ inputs.reboot_delay_minutes }} 'Activating bootc upgrade - scheduled by GitHub Actions'\"
                ]" \
                --comment "Scheduled reboot for bootc activation" \
                --region "${AWS_REGION}" || {
                  echo "- ⚠️ $INSTANCE_ID: Failed to schedule reboot" >> $GITHUB_STEP_SUMMARY
                }
              
              echo "- ⏰ $INSTANCE_ID: Reboot scheduled in ${{ inputs.reboot_delay_minutes }} minutes" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Update summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Update Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.bootc-switch.outputs.successful_updates }}" ]; then
            read -ra SUCCESSFUL <<< "${{ steps.bootc-switch.outputs.successful_updates }}"
            echo "### ✅ Successfully Updated (${#SUCCESSFUL[@]} instances):" >> $GITHUB_STEP_SUMMARY
            for INSTANCE in "${SUCCESSFUL[@]}"; do
              echo "- $INSTANCE" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          if [ -n "${{ steps.bootc-switch.outputs.failed_updates }}" ]; then
            read -ra FAILED <<< "${{ steps.bootc-switch.outputs.failed_updates }}"
            echo "### ❌ Failed Updates (${#FAILED[@]} instances):" >> $GITHUB_STEP_SUMMARY
            for INSTANCE in "${FAILED[@]}"; do
              echo "- $INSTANCE" >> $GITHUB_STEP_SUMMARY
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. 🔍 **Verify Updates**: SSH into instances and run \`sudo bootc status\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.force_reboot }}" == "true" ]; then
            echo "2. ⏰ **Reboots Scheduled**: Instances will reboot in ${{ inputs.reboot_delay_minutes }} minutes" >> $GITHUB_STEP_SUMMARY
            echo "3. 🔄 **After Reboot**: New bootc image will be active" >> $GITHUB_STEP_SUMMARY
          else
            echo "2. 🔄 **Manual Reboot Required**: Reboot instances to activate new image" >> $GITHUB_STEP_SUMMARY
            echo "   - Command: \`sudo reboot\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "4. ✅ **Verify**: After reboot, check \`sudo bootc status\` shows new image" >> $GITHUB_STEP_SUMMARY
          
          # Set exit code based on results
          if [ -n "${{ steps.bootc-switch.outputs.failed_updates }}" ]; then
            echo "❌ Some instances failed to update"
            exit 1
          else
            echo "✅ All targeted instances updated successfully"
          fi