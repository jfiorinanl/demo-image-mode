name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'javascript'
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

  dockerfile-security:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Hadolint (Dockerfile Linter)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Containerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true

    - name: Upload Hadolint SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif
        category: hadolint

    - name: Run Checkov IaC Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true

    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
        category: checkov

  container-security:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    needs: []  # Run independently
    env:
      SMDEV_CONTAINER_OFF: 1
      SOURCE_REGISTRY_HOST: "registry.redhat.io"
      CONTAINERFILE: Containerfile
      TEST_IMAGE: "security-test-image"
      DEST_REGISTRY_HOST: "ghcr.io"
    container:
      image: registry.access.redhat.com/ubi9/ubi
      options: --privileged

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install container tools
      run: dnf -y install podman buildah skopeo

    - name: Workaround podman-login action issue
      env:
        auth: "{ \"auths\": {} }"
      run: |
        mkdir -p $HOME/.docker
        echo $auth > $HOME/.docker/config.json

    - name: Log in to Red Hat registry
      uses: redhat-actions/podman-login@v1
      with:
        registry: ${{ env.SOURCE_REGISTRY_HOST }}
        username: ${{ secrets.SOURCE_REGISTRY_USER }}
        password: ${{ secrets.SOURCE_REGISTRY_PASSWORD }}
        auth_file_path: /run/containers/0/auth.json
      continue-on-error: true  # Allow to continue if registry login fails

    - name: Build test image for security scanning
      id: build-test-image
      run: |
        buildah bud -t ${{ env.TEST_IMAGE }} -f ${{ env.CONTAINERFILE }} .
        echo "image=${{ env.TEST_IMAGE }}" >> $GITHUB_OUTPUT

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.TEST_IMAGE }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: trivy-fs

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk-results.sarif --severity-threshold=medium
      continue-on-error: true  # Allow to continue if Snyk fails

    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk-results.sarif
        category: snyk
      continue-on-error: true  # Allow to continue if SARIF upload fails

    - name: Security audit for package managers
      run: |
        echo "## Package Manager Security Audit" >> $GITHUB_STEP_SUMMARY
        
        # Check if package.json exists (Node.js)
        if [ -f "package.json" ]; then
          echo "Found package.json - Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit.json || true
          echo "✅ NPM audit completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No package.json found - skipping npm audit" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check if requirements.txt exists (Python)
        if [ -f "requirements.txt" ]; then
          echo "Found requirements.txt - Running safety check..."
          pip install safety
          safety check --json > safety-audit.json || true
          echo "✅ Python safety check completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No requirements.txt found - skipping Python safety check" >> $GITHUB_STEP_SUMMARY
        fi

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dockerfile-security, container-security, dependency-security]
    if: always()
    
    steps:
    - name: Security Scan Results
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dockerfile Security | ${{ needs.dockerfile-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY  
        echo "| Dependency Security | ${{ needs.dependency-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the Security tab for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY