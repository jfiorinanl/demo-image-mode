name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dockerfile-security:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Hadolint (Dockerfile Linter)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Containerfile
        format: json
        output-file: hadolint-results.json
        no-fail: true

    - name: Convert Hadolint results to SARIF
      if: always()
      run: |
        if [ -f "hadolint-results.json" ]; then
          # Create proper SARIF format
          cat > hadolint-results.sarif << 'EOF'
        {
          "version": "2.1.0",
          "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "hadolint",
                  "version": "2.12.0",
                  "informationUri": "https://github.com/hadolint/hadolint"
                }
              },
              "results": []
            }
          ]
        }
        EOF
          
          # Convert JSON results to SARIF results array
          if [ -s "hadolint-results.json" ]; then
            jq '.[] | {
              "ruleId": .code,
              "level": (if .level == "error" then "error" elif .level == "warning" then "warning" else "note" end),
              "message": {
                "text": .message
              },
              "locations": [{
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": .file
                  },
                  "region": {
                    "startLine": .line,
                    "startColumn": .column
                  }
                }
              }]
            }' hadolint-results.json | jq -s '.' > results_array.json
            
            # Insert results into SARIF template
            jq '.runs[0].results = input' hadolint-results.sarif results_array.json > temp.sarif
            mv temp.sarif hadolint-results.sarif
            rm results_array.json
          fi
          
          echo "✅ SARIF conversion completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No hadolint results found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Hadolint SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('hadolint-results.sarif') != ''
      with:
        sarif_file: hadolint-results.sarif
        category: hadolint

    - name: Run Checkov IaC Security Scan
      uses: bridgecrewio/checkov-action@master
      continue-on-error: true
      with:
        directory: .
        framework: dockerfile
        output_format: sarif
        output_file_path: checkov-results.sarif
        soft_fail: true

    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
        category: checkov

  container-security:
    name: Container Image Security Scan
    runs-on: ubuntu-latest
    env:
      SMDEV_CONTAINER_OFF: 1
      SOURCE_REGISTRY_HOST: "registry.redhat.io"
      CONTAINERFILE: Containerfile
      TEST_IMAGE: "security-test-image"
      DEST_REGISTRY_HOST: "ghcr.io"
    container:
      image: registry.access.redhat.com/ubi9/ubi
      options: --privileged

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install container tools
      run: dnf -y install podman buildah skopeo

    - name: Cache DNF packages for security
      uses: actions/cache@v4
      with:
        path: /var/cache/dnf
        key: dnf-cache-security-${{ runner.os }}-${{ hashFiles('Containerfile') }}
        restore-keys: |
          dnf-cache-security-${{ runner.os }}-

    - name: Workaround podman-login action issue
      env:
        auth: "{ \"auths\": {} }"
      run: |
        mkdir -p $HOME/.docker
        echo $auth > $HOME/.docker/config.json

    - name: Log in to Red Hat registry
      uses: redhat-actions/podman-login@v1
      with:
        registry: ${{ env.SOURCE_REGISTRY_HOST }}
        username: ${{ secrets.SOURCE_REGISTRY_USER }}
        password: ${{ secrets.SOURCE_REGISTRY_PASSWORD }}
        auth_file_path: /run/containers/0/auth.json

    - name: Access a subscription via activation key
      run: subscription-manager register --org=${{ secrets.RHT_ORGID }} --activationkey=${{ secrets.RHT_ACT_KEY }}

    - name: Cache container images for security scan
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/containers
          /var/lib/containers
        key: security-container-images-${{ runner.os }}-${{ hashFiles('Containerfile') }}-${{ github.sha }}
        restore-keys: |
          security-container-images-${{ runner.os }}-${{ hashFiles('Containerfile') }}-
          security-container-images-${{ runner.os }}-

    - name: Cache Trivy database and binary
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/trivy
          /usr/local/bin/trivy
        key: trivy-cache-${{ runner.os }}-${{ hashFiles('**/Containerfile') }}-$(date +%Y-%m-%d)
        restore-keys: |
          trivy-cache-${{ runner.os }}-${{ hashFiles('**/Containerfile') }}-
          trivy-cache-${{ runner.os }}-

    - name: Build test image for security scanning
      id: build-test-image
      continue-on-error: true
      run: |
        echo "Building test image for security scanning..."
        if buildah bud -t ${{ env.TEST_IMAGE }} -f ${{ env.CONTAINERFILE }} .; then
          echo "✅ Test image built successfully" >> $GITHUB_STEP_SUMMARY
          echo "image=${{ env.TEST_IMAGE }}" >> $GITHUB_OUTPUT
          echo "build_success=true" >> $GITHUB_OUTPUT
          
          # Verify image exists in podman
          if podman images --format "{{.Repository}}:{{.Tag}}" | grep -q "^${{ env.TEST_IMAGE }}:latest$"; then
            echo "✅ Image verified in podman registry" >> $GITHUB_STEP_SUMMARY
            podman images | grep ${{ env.TEST_IMAGE }}
            
            # Save image for Trivy scan
            echo "Saving image for Trivy scan..."
            if podman save ${{ env.TEST_IMAGE }}:latest -o /tmp/security-test-image.tar; then
              echo "✅ Image saved to /tmp/security-test-image.tar" >> $GITHUB_STEP_SUMMARY
              echo "image_archive=/tmp/security-test-image.tar" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Failed to save image archive - scan will try direct podman access" >> $GITHUB_STEP_SUMMARY
              echo "image_archive=" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Image not found in podman registry" >> $GITHUB_STEP_SUMMARY
            echo "Available images:" >> $GITHUB_STEP_SUMMARY
            podman images --format "table {{.Repository}}:{{.Tag}} {{.ID}} {{.Created}}"
            echo "build_success=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ Test image build failed" >> $GITHUB_STEP_SUMMARY
          echo "build_success=false" >> $GITHUB_OUTPUT
        fi

    - name: Install and run Trivy vulnerability scanner
      id: trivy-scan
      if: always()
      continue-on-error: true
      run: |
        echo "Checking Trivy installation..."
        
        # Install Trivy if not cached
        if [ ! -f "/usr/local/bin/trivy" ]; then
          echo "Installing Trivy..."
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.64.1
        else
          echo "✅ Trivy found in cache"
        fi
        
        # Check if image build was successful
        if [ "${{ steps.build-test-image.outputs.build_success }}" != "true" ]; then
          echo "⚠️ Image build failed - skipping container scan" >> $GITHUB_STEP_SUMMARY
          echo "scan_success=false" >> $GITHUB_OUTPUT
          echo "scan_skipped=true" >> $GITHUB_OUTPUT
          echo "skip_reason=Image build failed" >> $GITHUB_OUTPUT
          return 0
        fi
        
        # Try different scan methods
        SCAN_SUCCESS=false
        
        # Method 1: Direct podman scan
        echo "Running Trivy scan on podman image: ${{ env.TEST_IMAGE }}"
        if trivy image --format sarif --output trivy-results.sarif --cache-dir ~/.cache/trivy --image-src podman ${{ env.TEST_IMAGE }}:latest; then
          echo "✅ Trivy scan completed successfully (podman source)" >> $GITHUB_STEP_SUMMARY
          SCAN_SUCCESS=true
        else
          echo "⚠️ Podman scan failed, trying with image archive..." >> $GITHUB_STEP_SUMMARY
          
          # Method 2: Archive scan
          if [ -f "${{ steps.build-test-image.outputs.image_archive }}" ]; then
            echo "Running Trivy scan on image archive: ${{ steps.build-test-image.outputs.image_archive }}"
            if trivy image --format sarif --output trivy-results.sarif --cache-dir ~/.cache/trivy --input ${{ steps.build-test-image.outputs.image_archive }}; then
              echo "✅ Trivy scan completed successfully (archive source)" >> $GITHUB_STEP_SUMMARY
              SCAN_SUCCESS=true
            else
              echo "⚠️ Archive scan failed, trying basic scan..." >> $GITHUB_STEP_SUMMARY
              
              # Method 3: Basic scan
              if trivy image --format sarif --output trivy-results.sarif --cache-dir ~/.cache/trivy ${{ env.TEST_IMAGE }}; then
                echo "✅ Trivy scan completed (basic mode)" >> $GITHUB_STEP_SUMMARY
                SCAN_SUCCESS=true
              fi
            fi
          else
            echo "⚠️ Image archive not available, trying basic scan..." >> $GITHUB_STEP_SUMMARY
            
            # Method 3: Basic scan fallback
            if trivy image --format sarif --output trivy-results.sarif --cache-dir ~/.cache/trivy ${{ env.TEST_IMAGE }}; then
              echo "✅ Trivy scan completed (basic mode)" >> $GITHUB_STEP_SUMMARY
              SCAN_SUCCESS=true
            fi
          fi
        fi
        
        # Report results
        if [ "$SCAN_SUCCESS" = "true" ] && [ -f "trivy-results.sarif" ]; then
          echo "✅ SARIF results generated successfully" >> $GITHUB_STEP_SUMMARY
          echo "scan_success=true" >> $GITHUB_OUTPUT
          echo "scan_skipped=false" >> $GITHUB_OUTPUT
          ls -la trivy-results.sarif
        else
          echo "❌ All Trivy scan methods failed - no SARIF output generated" >> $GITHUB_STEP_SUMMARY
          echo "scan_success=false" >> $GITHUB_OUTPUT
          echo "scan_skipped=false" >> $GITHUB_OUTPUT
          echo "skip_reason=All scan methods failed" >> $GITHUB_OUTPUT
        fi

    - name: Check if Trivy SARIF file exists
      id: check-trivy-sarif
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
          echo "✅ Trivy SARIF file created successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "❌ Trivy SARIF file not found" >> $GITHUB_STEP_SUMMARY
          ls -la
        fi

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.check-trivy-sarif.outputs.sarif_exists == 'true'
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy

    - name: Run Trivy filesystem scan
      continue-on-error: true
      run: |
        echo "Running Trivy filesystem scan..."
        
        # Run filesystem scan with cache optimization
        trivy fs --format sarif --output trivy-fs-results.sarif --cache-dir ~/.cache/trivy .
        
        if [ -f "trivy-fs-results.sarif" ]; then
          echo "✅ Trivy filesystem scan completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Trivy filesystem scan failed to generate SARIF output" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check if Trivy filesystem SARIF file exists
      id: check-trivy-fs-sarif
      run: |
        if [ -f "trivy-fs-results.sarif" ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
          echo "✅ Trivy filesystem SARIF file created successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "❌ Trivy filesystem SARIF file not found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.check-trivy-fs-sarif.outputs.sarif_exists == 'true'
      continue-on-error: true
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: trivy-fs

  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      id: snyk-scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --sarif-file-output=snyk-results.sarif --severity-threshold=medium

    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk-results.sarif
        category: snyk
      continue-on-error: true  # Allow to continue if SARIF upload fails

    - name: Security audit for package managers
      continue-on-error: true
      run: |
        echo "## Package Manager Security Audit" >> $GITHUB_STEP_SUMMARY
        
        # Check if package.json exists (Node.js)
        if [ -f "package.json" ]; then
          echo "Found package.json - Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit.json || true
          echo "✅ NPM audit completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No package.json found - skipping npm audit" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check if requirements.txt exists (Python)
        if [ -f "requirements.txt" ]; then
          echo "Found requirements.txt - Running safety check..."
          pip install safety
          safety check --json > safety-audit.json || true
          echo "✅ Python safety check completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No requirements.txt found - skipping Python safety check" >> $GITHUB_STEP_SUMMARY
        fi

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [ dockerfile-security, container-security, dependency-security]
    if: always()
    
    steps:
    - name: Security Scan Results
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dockerfile Security | ${{ needs.dockerfile-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Security | ${{ needs.dependency-security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Report scan results - non-blocking
        SCANS_WITH_ISSUES=false
        
        # Check individual scan results
        if [ "${{ needs.dockerfile-security.result }}" == "failure" ]; then
          echo "❌ **Dockerfile Security**: Some issues detected" >> $GITHUB_STEP_SUMMARY
          SCANS_WITH_ISSUES=true
        elif [ "${{ needs.dockerfile-security.result }}" == "success" ]; then
          echo "✅ **Dockerfile Security**: No issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Dockerfile Security**: Scan did not complete" >> $GITHUB_STEP_SUMMARY
          SCANS_WITH_ISSUES=true
        fi
        
        if [ "${{ needs.container-security.result }}" == "failure" ]; then
          echo "❌ **Container Security**: Some issues detected" >> $GITHUB_STEP_SUMMARY
          SCANS_WITH_ISSUES=true
        elif [ "${{ needs.container-security.result }}" == "success" ]; then
          echo "✅ **Container Security**: No issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Container Security**: Scan did not complete" >> $GITHUB_STEP_SUMMARY
          SCANS_WITH_ISSUES=true
        fi
        
        if [ "${{ needs.dependency-security.result }}" == "failure" ]; then
          echo "❌ **Dependency Security**: Some issues detected" >> $GITHUB_STEP_SUMMARY
          SCANS_WITH_ISSUES=true
        elif [ "${{ needs.dependency-security.result }}" == "success" ]; then
          echo "✅ **Dependency Security**: No issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Dependency Security**: Scan did not complete" >> $GITHUB_STEP_SUMMARY
          SCANS_WITH_ISSUES=true
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Detailed Reports**: Check the Security tab for complete vulnerability analysis." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Summary - never fails the pipeline
        if [ "$SCANS_WITH_ISSUES" = "true" ]; then
          echo "⚠️ **SECURITY SCAN: COMPLETED WITH FINDINGS**" >> $GITHUB_STEP_SUMMARY
          echo "Some security scans detected issues or did not complete successfully." >> $GITHUB_STEP_SUMMARY
          echo "Review the findings above and check the Security tab for details." >> $GITHUB_STEP_SUMMARY
          echo "**Note**: Pipeline continues to allow deployment - review findings before production use." >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **SECURITY SCAN: COMPLETED SUCCESSFULLY**" >> $GITHUB_STEP_SUMMARY
          echo "All security scans completed without detecting significant issues." >> $GITHUB_STEP_SUMMARY
        fi