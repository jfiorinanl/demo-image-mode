name: Publish

on:
  workflow_call:
    inputs:
      image_tag:
        description: "Tag de la imagen en GHCR (ej: latest, v1.2.3)"
        required: true
        type: string
      ami_name_override:
        description: "Nombre AMI opcional (si no se define, se genera por defecto)"
        required: false
        type: string
    secrets:
      # AWS
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_S3_BUCKET:
        required: true
      # Red Hat registry (para pull de rhel9/bootc-image-builder)
      SOURCE_REGISTRY_USER:
        required: true
      SOURCE_REGISTRY_PASSWORD:
        required: true
      # GITHUB_TOKEN se hereda con `secrets: inherit` desde el caller

jobs:
  build-ami:
    name: Build & Register AMI (RHEL bootc-image-builder)
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DEST_REGISTRY_HOST: ghcr.io
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
      IMAGE_TAG: ${{ inputs.image_tag }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AMI_NAME_PREFIX: ${{ vars.AMI_NAME_PREFIX }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preparar variables
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          SRC_IMAGE="ghcr.io/${REPO_OWNER}/${REPO_NAME}:${IMAGE_TAG}"
          if [ -n "${{ inputs.ami_name_override }}" ]; then
            AMI_NAME="${{ inputs.ami_name_override }}"
          elif [ -n "${AMI_NAME_PREFIX:-}" ]; then
            AMI_NAME="${AMI_NAME_PREFIX}-${IMAGE_TAG}-${GITHUB_RUN_NUMBER}"
          else
            AMI_NAME="${REPO_NAME}-${IMAGE_TAG}-${GITHUB_RUN_NUMBER}"
          fi
          echo "src_image=$SRC_IMAGE" >> $GITHUB_OUTPUT
          echo "ami_name=$AMI_NAME" >> $GITHUB_OUTPUT
          echo "Usando imagen: $SRC_IMAGE"
          echo "Nombre AMI:   $AMI_NAME"

      - name: Workaround open podman-login action issue
        env:
          auth: "{ \"auths\": {} }"
        run: |
          mkdir -p $HOME/.docker
          echo $auth > $HOME/.docker/config.json

      - name: Login a registry.redhat.io (rootful)
        run: |
          sudo mkdir -p /tmp/auth

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          auth_file_path: /tmp/storage-run-0/containers/auth.json

      - name: Log in to the RHT terms based registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: registry.redhat.io
          username: ${{ secrets.SOURCE_REGISTRY_USER }}
          password: ${{ secrets.SOURCE_REGISTRY_PASSWORD }}
          auth_file_path: /tmp/storage-run-0/containers/auth.json

      - name: Crear y registrar AMI con RHEL bootc-image-builder (driver vfs)
        run: |
          sudo podman run \
            --rm -it \
            --privileged \
            --pull=newer \
            --security-opt label=type:unconfined_t \
            -v /home/runner/.docker/config.json:/run/containers/0/auth.json \
            -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
            -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
            -e AWS_REGION="${AWS_REGION}" \
            -e AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}" \
            registry.redhat.io/rhel9/bootc-image-builder:latest \
              --type ami \
              --aws-ami-name "${{ steps.vars.outputs.ami_name }}" \
              --aws-bucket "${AWS_S3_BUCKET}" \
              --aws-region "${AWS_REGION}" \
              "${{ steps.vars.outputs.src_image }}"

      - name: Mostrar resultado
        run: |
          echo "AMI solicitada: ${{ steps.vars.outputs.ami_name }}"
          echo "Región:         ${AWS_REGION}"
          echo "Bucket S3:      ${AWS_S3_BUCKET}"
          echo "Imagen fuente:  ${{ steps.vars.outputs.src_image }}"
          echo "Verificá en EC2 > AMIs hasta que el estado sea 'available'."